<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dev-angelo.github.io/</id><title>Angelo's blog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-10-10T01:07:12+09:00</updated> <author> <name>Angelo</name> <uri>https://dev-angelo.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dev-angelo.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://dev-angelo.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Angelo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>깃헙 페이지에 Chirpy 테마 적용하기</title><link href="https://dev-angelo.github.io/posts/Apply-Chirpy-Theme-On-Github-Pages/" rel="alternate" type="text/html" title="깃헙 페이지에 Chirpy 테마 적용하기" /><published>2021-02-11T23:50:30+09:00</published> <updated>2021-02-14T01:33:51+09:00</updated> <id>https://dev-angelo.github.io/posts/Apply-Chirpy-Theme-On-Github-Pages/</id> <content src="https://dev-angelo.github.io/posts/Apply-Chirpy-Theme-On-Github-Pages/" /> <author> <name>Angelo</name> </author> <category term="ETC" /> <category term="Github Pages" /> <summary> 깃헙 페이지에 Chirpy 테마 적용하기 깃헙 페이지에 Chirpy 테마를 적용하는 방법을 정리한 포스트입니다. Chirpy Chirpy Demo 깃헙 페이지 생성 Repositories 탭에서 New 버튼 클릭 리파지토리 생성 버튼을 클릭합니다. 리파지토리 생성 Repository name: GithubId.github.io GithubId.github.io 로 설정하지 않으면 https://dev-angelo.github.io/ 가 아닌 다른 주소에 깃헙 페이지가 생성되게 됩니다. Public / Private: Public 선택 깃헙 무료 사용자일 경우에 깃헙 페이지는 public 리파지토리에서만 가능합니... </summary> </entry> <entry><title>Scope</title><link href="https://dev-angelo.github.io/posts/Scope/" rel="alternate" type="text/html" title="Scope" /><published>2020-09-07T20:33:00+09:00</published> <updated>2020-09-07T20:33:00+09:00</updated> <id>https://dev-angelo.github.io/posts/Scope/</id> <content src="https://dev-angelo.github.io/posts/Scope/" /> <author> <name>Angelo</name> </author> <category term="JavaScript" /> <summary> Scope 1. Scope 란? Scope 는 JS 엔진에 의해 어떠한 문맥이 실행되고 있을 때 그 상황에서의 변수, 상수 및 매개변수 등의 접근 가능 범위 (유효 범위) 라고 표현 할 수 있습니다. //Example-1 const testfunc = function() { const a = 10; } 위의 예제에서 변수 ‘a’ 의 스코프는 ‘testfunc’ 함수라고 할 수 있습니다. 2. Scope 구성 시점 특정 문맥에서의 Scope 는 그 문맥에서의 Lexical Environment 에 의해 결정됩니다. 그럼 저 Lexical Environment 은 언제 생기는가에 대한 궁금증이 생기게 되는데, JS 엔진이 함수 혹은 블록 (이하 코드블럭)을 만나면 코드블럭 내부의 코드를 ... </summary> </entry> <entry><title>Execution Context</title><link href="https://dev-angelo.github.io/posts/Execution-Context/" rel="alternate" type="text/html" title="Execution Context" /><published>2020-08-07T16:33:00+09:00</published> <updated>2021-10-10T01:00:44+09:00</updated> <id>https://dev-angelo.github.io/posts/Execution-Context/</id> <content src="https://dev-angelo.github.io/posts/Execution-Context/" /> <author> <name>Angelo</name> </author> <category term="JavaScript" /> <summary> Execution Context 실행 컨텍스트란? 실행 컨텍스트는 Javascript 코드가 평가되고 실행되는 환경이라고 할 수 있습니다. 실행 컨텍스트는 함수나 메소드가 호출되었을 때 생성됩니다. 사용자가 작성한 코드를 실행 할 수 있는, JavaScript 엔진에 의해서 만들어지는 익명의 공간입니다. 실행 컨텍스트는 사용자가 작성하지 않은 코드들 (this, 변수들 및 객체와 함수 정의 등) 도 포함합니다. JavaScript 의 코드들은 실행될 때 각 Scope 에 해당되는 실행 컨텍스트 내에서 동작합니다. 정리하면 실행 컨텍스트란 함수나 메소드가 호출 될 때 JavaScript 엔진에 의해 만들어지는 익명의 공간으로서 JavaScript 엔진이 사용자 코드를 실행하기 ... </summary> </entry> </feed>
